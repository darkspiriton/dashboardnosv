{"version":3,"names":[],"mappings":"","sources":["satellizer.min.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/**\r\n * Satellizer 0.14.0\r\n * (c) 2016 Sahat Yalkabov\r\n * License: MIT\r\n */\n\n// CommonJS package manager support.\nif (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {\n  module.exports = 'satellizer';\n}\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  if (!window.location.origin) {\n    window.location.origin = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');\n  }\n\n  angular.module('satellizer', []).constant('SatellizerConfig', {\n    httpInterceptor: function httpInterceptor() {\n      return true;\n    },\n    withCredentials: false,\n    tokenRoot: null,\n    baseUrl: '/',\n    loginUrl: '/auth/login',\n    signupUrl: '/auth/signup',\n    unlinkUrl: '/auth/unlink/',\n    tokenName: 'token',\n    tokenPrefix: 'satellizer',\n    authHeader: 'Authorization',\n    authToken: 'Bearer',\n    storageType: 'localStorage',\n    configRol: 'role',\n    nameRole: 'roleName',\n    configInfo: 'name',\n    nameInfo: 'fullName',\n    providers: {\n      facebook: {\n        name: 'facebook',\n        url: '/auth/facebook',\n        authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\n        redirectUri: window.location.origin + '/',\n        requiredUrlParams: ['display', 'scope'],\n        scope: ['email'],\n        scopeDelimiter: ',',\n        display: 'popup',\n        oauthType: '2.0',\n        popupOptions: { width: 580, height: 400 }\n      },\n      google: {\n        name: 'google',\n        url: '/auth/google',\n        authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\n        redirectUri: window.location.origin,\n        requiredUrlParams: ['scope'],\n        optionalUrlParams: ['display', 'state'],\n        scope: ['profile', 'email'],\n        scopePrefix: 'openid',\n        scopeDelimiter: ' ',\n        display: 'popup',\n        oauthType: '2.0',\n        popupOptions: { width: 452, height: 633 },\n        state: function state() {\n          var rand = Math.random().toString(36).substr(2);\n          return encodeURIComponent(rand);\n        }\n      },\n      github: {\n        name: 'github',\n        url: '/auth/github',\n        authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n        redirectUri: window.location.origin,\n        optionalUrlParams: ['scope'],\n        scope: ['user:email'],\n        scopeDelimiter: ' ',\n        oauthType: '2.0',\n        popupOptions: { width: 1020, height: 618 }\n      },\n      instagram: {\n        name: 'instagram',\n        url: '/auth/instagram',\n        authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\n        redirectUri: window.location.origin,\n        requiredUrlParams: ['scope'],\n        scope: ['basic'],\n        scopeDelimiter: '+',\n        oauthType: '2.0'\n      },\n      linkedin: {\n        name: 'linkedin',\n        url: '/auth/linkedin',\n        authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\n        redirectUri: window.location.origin,\n        requiredUrlParams: ['state'],\n        scope: ['r_emailaddress'],\n        scopeDelimiter: ' ',\n        state: 'STATE',\n        oauthType: '2.0',\n        popupOptions: { width: 527, height: 582 }\n      },\n      twitter: {\n        name: 'twitter',\n        url: '/auth/twitter',\n        authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\n        redirectUri: window.location.origin,\n        oauthType: '1.0',\n        popupOptions: { width: 495, height: 645 }\n      },\n      twitch: {\n        name: 'twitch',\n        url: '/auth/twitch',\n        authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\n        redirectUri: window.location.origin,\n        requiredUrlParams: ['scope'],\n        scope: ['user_read'],\n        scopeDelimiter: ' ',\n        display: 'popup',\n        oauthType: '2.0',\n        popupOptions: { width: 500, height: 560 }\n      },\n      live: {\n        name: 'live',\n        url: '/auth/live',\n        authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\n        redirectUri: window.location.origin,\n        requiredUrlParams: ['display', 'scope'],\n        scope: ['wl.emails'],\n        scopeDelimiter: ' ',\n        display: 'popup',\n        oauthType: '2.0',\n        popupOptions: { width: 500, height: 560 }\n      },\n      yahoo: {\n        name: 'yahoo',\n        url: '/auth/yahoo',\n        authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\n        redirectUri: window.location.origin,\n        scope: [],\n        scopeDelimiter: ',',\n        oauthType: '2.0',\n        popupOptions: { width: 559, height: 519 }\n      },\n      bitbucket: {\n        name: 'bitbucket',\n        url: '/auth/bitbucket',\n        authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\n        redirectUri: window.location.origin + '/',\n        requiredUrlParams: ['scope'],\n        scope: ['email'],\n        scopeDelimiter: ' ',\n        oauthType: '2.0',\n        popupOptions: { width: 1028, height: 529 }\n      }\n    }\n  }).provider('$auth', ['SatellizerConfig', function (config) {\n    Object.defineProperties(this, {\n      httpInterceptor: {\n        get: function get() {\n          return config.httpInterceptor;\n        },\n        set: function set(value) {\n          if (typeof value === 'function') {\n            config.httpInterceptor = value;\n          } else {\n            config.httpInterceptor = function () {\n              return value;\n            };\n          }\n        }\n      },\n      baseUrl: {\n        get: function get() {\n          return config.baseUrl;\n        },\n        set: function set(value) {\n          config.baseUrl = value;\n        }\n      },\n      loginUrl: {\n        get: function get() {\n          return config.loginUrl;\n        },\n        set: function set(value) {\n          config.loginUrl = value;\n        }\n      },\n      signupUrl: {\n        get: function get() {\n          return config.signupUrl;\n        },\n        set: function set(value) {\n          config.signupUrl = value;\n        }\n      },\n      tokenRoot: {\n        get: function get() {\n          return config.tokenRoot;\n        },\n        set: function set(value) {\n          config.tokenRoot = value;\n        }\n      },\n      tokenName: {\n        get: function get() {\n          return config.tokenName;\n        },\n        set: function set(value) {\n          config.tokenName = value;\n        }\n      },\n      tokenPrefix: {\n        get: function get() {\n          return config.tokenPrefix;\n        },\n        set: function set(value) {\n          config.tokenPrefix = value;\n        }\n      },\n      unlinkUrl: {\n        get: function get() {\n          return config.unlinkUrl;\n        },\n        set: function set(value) {\n          config.unlinkUrl = value;\n        }\n      },\n      authHeader: {\n        get: function get() {\n          return config.authHeader;\n        },\n        set: function set(value) {\n          config.authHeader = value;\n        }\n      },\n      authToken: {\n        get: function get() {\n          return config.authToken;\n        },\n        set: function set(value) {\n          config.authToken = value;\n        }\n      },\n      withCredentials: {\n        get: function get() {\n          return config.withCredentials;\n        },\n        set: function set(value) {\n          config.withCredentials = value;\n        }\n      },\n      storageType: {\n        get: function get() {\n          return config.storageType;\n        },\n        set: function set(value) {\n          config.storageType = value;\n        }\n      }\n    });\n\n    angular.forEach(Object.keys(config.providers), function (provider) {\n      this[provider] = function (params) {\n        return angular.extend(config.providers[provider], params);\n      };\n    }, this);\n\n    var oauth = function oauth(params) {\n      config.providers[params.name] = config.providers[params.name] || {};\n      angular.extend(config.providers[params.name], params);\n    };\n\n    this.oauth1 = function (params) {\n      oauth(params);\n      config.providers[params.name].oauthType = '1.0';\n    };\n\n    this.oauth2 = function (params) {\n      oauth(params);\n      config.providers[params.name].oauthType = '2.0';\n    };\n\n    this.$get = ['$q', 'SatellizerShared', 'SatellizerLocal', 'SatellizerOauth', function ($q, shared, local, oauth) {\n      var $auth = {};\n\n      $auth.login = function (user, opts) {\n        return local.login(user, opts);\n      };\n\n      $auth.signup = function (user, options) {\n        return local.signup(user, options);\n      };\n\n      $auth.logout = function () {\n        return shared.logout();\n      };\n\n      $auth.authenticate = function (name, userData) {\n        return oauth.authenticate(name, userData);\n      };\n\n      $auth.link = function (name, userData) {\n        return oauth.authenticate(name, userData);\n      };\n\n      $auth.unlink = function (provider, opts) {\n        return oauth.unlink(provider, opts);\n      };\n\n      $auth.isAuthenticated = function () {\n        return shared.isAuthenticated();\n      };\n\n      $auth.getToken = function () {\n        return shared.getToken();\n      };\n\n      $auth.setToken = function (token) {\n        shared.setToken({ access_token: token });\n      };\n\n      $auth.removeToken = function () {\n        return shared.removeToken();\n      };\n\n      $auth.getPayload = function () {\n        return shared.getPayload();\n      };\n\n      $auth.setStorageType = function (type) {\n        return shared.setStorageType(type);\n      };\n\n      return $auth;\n    }];\n  }]).factory('SatellizerShared', ['$q', '$window', '$log', 'SatellizerConfig', 'SatellizerStorage', function ($q, $window, $log, config, storage) {\n    var Shared = {};\n\n    var tokenName = config.tokenPrefix ? [config.tokenPrefix, config.tokenName].join('_') : config.tokenName;\n\n    Shared.getToken = function () {\n      return storage.get(tokenName);\n    };\n\n    Shared.getPayload = function () {\n      var token = storage.get(tokenName);\n\n      if (token && token.split('.').length === 3) {\n        try {\n          var base64Url = token.split('.')[1];\n          var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n          return JSON.parse(decodeURIComponent(escape(window.atob(base64))));\n        } catch (e) {\n          return undefined;\n        }\n      }\n    };\n\n    Shared.setToken = function (response) {\n      if (!response) {\n        return $log.warn('Can\\'t set token without passing a value');\n      }\n\n      var accessToken = response && response.access_token;\n      var token, role, name;\n      var nameRole = config.nameRole;\n      var nameInfo = config.nameInfo;\n\n      if (accessToken) {\n        if (angular.isObject(accessToken) && angular.isObject(accessToken.data)) {\n          response = accessToken;\n        } else if (angular.isString(accessToken)) {\n          token = accessToken;\n        }\n      }\n\n      if (!token && response) {\n        var tokenRootData = config.tokenRoot && config.tokenRoot.split('.').reduce(function (o, x) {\n          return o[x];\n        }, response.data);\n        token = tokenRootData ? tokenRootData[config.tokenName] : response.data && response.data[config.tokenName];\n        role = response.data && response.data[config.configRol];\n        name = response.data && response.data[config.configInfo];\n      }\n\n      if (!token) {\n        var tokenPath = config.tokenRoot ? config.tokenRoot + '.' + config.tokenName : config.tokenName;\n        return $log.warn('Expecting a token named \"' + tokenPath);\n      }\n\n      storage.set(tokenName, token);\n      storage.set(nameRole, role);\n      storage.set(nameInfo, name);\n    };\n\n    Shared.removeToken = function () {\n      storage.remove(tokenName);\n    };\n\n    /**\r\n     * @returns {boolean}\r\n     */\n    Shared.isAuthenticated = function () {\n      var token = storage.get(tokenName);\n      // A token is present\n      if (token) {\n        // Token with a valid JWT format XXX.YYY.ZZZ\n        if (token.split('.').length === 3) {\n          // Could be a valid JWT or an access token with the same format\n          try {\n            var base64Url = token.split('.')[1];\n            var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n            var exp = JSON.parse($window.atob(base64)).exp;\n            // JWT with an optonal expiration claims\n            if (exp) {\n              var isExpired = Math.round(new Date().getTime() / 1000) >= exp;\n              if (isExpired) {\n                // FAIL: Expired token\n                return false;\n              } else {\n                // PASS: Non-expired token\n                return true;\n              }\n            }\n          } catch (e) {\n            // PASS: Non-JWT token that looks like JWT\n            return true;\n          }\n        }\n        // PASS: All other tokens\n        return true;\n      }\n      // FAIL: No token at all\n      return false;\n    };\n\n    Shared.logout = function () {\n      storage.remove(tokenName);\n      return $q.when();\n    };\n\n    Shared.setStorageType = function (type) {\n      config.storageType = type;\n    };\n\n    return Shared;\n  }]).factory('SatellizerOauth', ['$q', '$http', 'SatellizerConfig', 'SatellizerUtils', 'SatellizerShared', 'SatellizerOauth1', 'SatellizerOauth2', function ($q, $http, config, utils, shared, Oauth1, Oauth2) {\n    var Oauth = {};\n\n    Oauth.authenticate = function (name, userData) {\n      var provider = config.providers[name].oauthType === '1.0' ? new Oauth1() : new Oauth2();\n      var deferred = $q.defer();\n\n      provider.open(config.providers[name], userData || {}).then(function (response) {\n        // This is for a scenario when someone wishes to opt out from\n        // Satellizer's magic by doing authorization code exchange and\n        // saving a token manually.\n        if (config.providers[name].url) {\n          shared.setToken(response, false);\n        }\n        deferred.resolve(response);\n      }).catch(function (error) {\n        deferred.reject(error);\n      });\n\n      return deferred.promise;\n    };\n\n    Oauth.unlink = function (provider, opts) {\n      opts = opts || {};\n      opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.unlinkUrl);\n      opts.data = { provider: provider } || opts.data;\n      opts.method = opts.method || 'POST';\n      opts.withCredentials = opts.withCredentials || config.withCredentials;\n\n      return $http(opts);\n    };\n\n    return Oauth;\n  }]).factory('SatellizerLocal', ['$http', 'SatellizerUtils', 'SatellizerShared', 'SatellizerConfig', function ($http, utils, shared, config) {\n    var Local = {};\n\n    Local.login = function (user, opts) {\n      opts = opts || {};\n      opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.loginUrl);\n      opts.data = user || opts.data;\n      opts.method = opts.method || 'POST';\n      opts.withCredentials = opts.withCredentials || config.withCredentials;\n\n      return $http(opts).then(function (response) {\n        shared.setToken(response);\n        return response;\n      });\n    };\n\n    Local.signup = function (user, opts) {\n      opts = opts || {};\n      opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.signupUrl);\n      opts.data = user || opts.data;\n      opts.method = opts.method || 'POST';\n      opts.withCredentials = opts.withCredentials || config.withCredentials;\n\n      return $http(opts);\n    };\n\n    return Local;\n  }]).factory('SatellizerOauth2', ['$q', '$http', '$window', '$timeout', 'SatellizerPopup', 'SatellizerUtils', 'SatellizerConfig', 'SatellizerStorage', function ($q, $http, $window, $timeout, popup, utils, config, storage) {\n    return function () {\n      var Oauth2 = {};\n\n      var defaults = {\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\n        responseType: 'code',\n        responseParams: {\n          code: 'code',\n          clientId: 'clientId',\n          redirectUri: 'redirectUri'\n        }\n      };\n\n      Oauth2.open = function (options, userData) {\n        defaults = utils.merge(options, defaults);\n        var defer = $q.defer();\n\n        $timeout(function () {\n          var url;\n          var openPopup;\n          var stateName = defaults.name + '_state';\n\n          if (angular.isFunction(defaults.state)) {\n            storage.set(stateName, defaults.state());\n          } else if (angular.isString(defaults.state)) {\n            storage.set(stateName, defaults.state);\n          }\n\n          url = [defaults.authorizationEndpoint, Oauth2.buildQueryString()].join('?');\n\n          if (window.cordova) {\n            openPopup = popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri).eventListener(defaults.redirectUri);\n          } else {\n            openPopup = popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri).pollPopup(defaults.redirectUri);\n          }\n\n          return openPopup.then(function (oauthData) {\n            // When no server URL provided, return popup params as-is.\n            // This is for a scenario when someone wishes to opt out from\n            // Satellizer's magic by doing authorization code exchange and\n            // saving a token manually.\n            if (defaults.responseType === 'token' || !defaults.url) {\n              return defer.resolve(oauthData);\n            }\n\n            if (oauthData.state && oauthData.state !== storage.get(stateName)) {\n              return defer.reject('The value returned in the state parameter does not match the state value from your original ' + 'authorization code request.');\n            }\n\n            defer.resolve(Oauth2.exchangeForToken(oauthData, userData));\n          });\n        });\n\n        return defer.promise;\n      };\n\n      Oauth2.exchangeForToken = function (oauthData, userData) {\n        var data = angular.extend({}, userData);\n\n        angular.forEach(defaults.responseParams, function (value, key) {\n          switch (key) {\n            case 'code':\n              data[value] = oauthData.code;\n              break;\n            case 'clientId':\n              data[value] = defaults.clientId;\n              break;\n            case 'redirectUri':\n              data[value] = defaults.redirectUri;\n              break;\n            default:\n              data[value] = oauthData[key];\n          }\n        });\n\n        if (oauthData.state) {\n          data.state = oauthData.state;\n        }\n\n        var exchangeForTokenUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;\n\n        return $http.post(exchangeForTokenUrl, data, { withCredentials: config.withCredentials });\n      };\n\n      Oauth2.buildQueryString = function () {\n        var keyValuePairs = [];\n        var urlParamsCategories = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\n\n        angular.forEach(urlParamsCategories, function (paramsCategory) {\n          angular.forEach(defaults[paramsCategory], function (paramName) {\n            var camelizedName = utils.camelCase(paramName);\n            var paramValue = angular.isFunction(defaults[paramName]) ? defaults[paramName]() : defaults[camelizedName];\n\n            if (paramName === 'redirect_uri' && !paramValue) {\n              return;\n            }\n\n            if (paramName === 'state') {\n              var stateName = defaults.name + '_state';\n              paramValue = encodeURIComponent(storage.get(stateName));\n            }\n\n            if (paramName === 'scope' && Array.isArray(paramValue)) {\n              paramValue = paramValue.join(defaults.scopeDelimiter);\n\n              if (defaults.scopePrefix) {\n                paramValue = [defaults.scopePrefix, paramValue].join(defaults.scopeDelimiter);\n              }\n            }\n\n            keyValuePairs.push([paramName, paramValue]);\n          });\n        });\n\n        return keyValuePairs.map(function (pair) {\n          return pair.join('=');\n        }).join('&');\n      };\n\n      return Oauth2;\n    };\n  }]).factory('SatellizerOauth1', ['$q', '$http', 'SatellizerPopup', 'SatellizerConfig', 'SatellizerUtils', function ($q, $http, popup, config, utils) {\n    return function () {\n      var Oauth1 = {};\n\n      var defaults = {\n        url: null,\n        name: null,\n        popupOptions: null,\n        redirectUri: null,\n        authorizationEndpoint: null\n      };\n\n      Oauth1.open = function (options, userData) {\n        angular.extend(defaults, options);\n        var popupWindow;\n        var serverUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;\n\n        if (!window.cordova) {\n          popupWindow = popup.open('', defaults.name, defaults.popupOptions, defaults.redirectUri);\n        }\n\n        return $http.post(serverUrl, defaults).then(function (response) {\n          var url = [defaults.authorizationEndpoint, Oauth1.buildQueryString(response.data)].join('?');\n\n          if (window.cordova) {\n            popupWindow = popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri);\n          } else {\n            popupWindow.popupWindow.location = url;\n          }\n\n          var popupListener;\n\n          if (window.cordova) {\n            popupListener = popupWindow.eventListener(defaults.redirectUri);\n          } else {\n            popupListener = popupWindow.pollPopup(defaults.redirectUri);\n          }\n\n          return popupListener.then(function (response) {\n            return Oauth1.exchangeForToken(response, userData);\n          });\n        });\n      };\n\n      Oauth1.exchangeForToken = function (oauthData, userData) {\n        var data = angular.extend({}, userData, oauthData);\n        var exchangeForTokenUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;\n        return $http.post(exchangeForTokenUrl, data, { withCredentials: config.withCredentials });\n      };\n\n      Oauth1.buildQueryString = function (obj) {\n        var str = [];\n\n        angular.forEach(obj, function (value, key) {\n          str.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        });\n\n        return str.join('&');\n      };\n\n      return Oauth1;\n    };\n  }]).factory('SatellizerPopup', ['$q', '$interval', '$window', 'SatellizerConfig', 'SatellizerUtils', function ($q, $interval, $window, config, utils) {\n    var Popup = {};\n\n    Popup.url = '';\n    Popup.popupWindow = null;\n\n    Popup.open = function (url, name, options) {\n      Popup.url = url;\n\n      var stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\n      var UA = $window.navigator.userAgent;\n      var windowName = window.cordova || UA.indexOf('CriOS') > -1 ? '_blank' : name;\n\n      Popup.popupWindow = $window.open(url, windowName, stringifiedOptions);\n\n      $window.popup = Popup.popupWindow;\n\n      if (Popup.popupWindow && Popup.popupWindow.focus) {\n        Popup.popupWindow.focus();\n      }\n\n      return Popup;\n    };\n\n    Popup.eventListener = function (redirectUri) {\n      var deferred = $q.defer();\n\n      Popup.popupWindow.addEventListener('loadstart', function (event) {\n        if (event.url.indexOf(redirectUri) !== 0) {\n          return;\n        }\n\n        var parser = document.createElement('a');\n        parser.href = event.url;\n\n        if (parser.search || parser.hash) {\n          var queryParams = parser.search.substring(1).replace(/\\/$/, '');\n          var hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n          var hash = utils.parseQueryString(hashParams);\n          var qs = utils.parseQueryString(queryParams);\n\n          angular.extend(qs, hash);\n\n          if (!qs.error) {\n            deferred.resolve(qs);\n          }\n\n          Popup.popupWindow.close();\n        }\n      });\n\n      Popup.popupWindow.addEventListener('loaderror', function () {\n        deferred.reject('Authorization Failed');\n      });\n\n      return deferred.promise;\n    };\n\n    Popup.pollPopup = function (redirectUri) {\n      var deferred = $q.defer();\n\n      var redirectUriParser = document.createElement('a');\n      redirectUriParser.href = redirectUri;\n\n      var redirectUriPath = utils.getFullUrlPath(redirectUriParser);\n\n      var polling = $interval(function () {\n        if (!Popup.popupWindow || Popup.popupWindow.closed || Popup.popupWindow.closed === undefined) {\n          deferred.reject('The popup window was closed.');\n          $interval.cancel(polling);\n        }\n\n        try {\n          var popupWindowPath = utils.getFullUrlPath(Popup.popupWindow.location);\n\n          // Redirect has occurred.\n          if (popupWindowPath === redirectUriPath) {\n            // Contains query/hash parameters as expected.\n            if (Popup.popupWindow.location.search || Popup.popupWindow.location.hash) {\n              var queryParams = Popup.popupWindow.location.search.substring(1).replace(/\\/$/, '');\n              var hashParams = Popup.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n              var hash = utils.parseQueryString(hashParams);\n              var qs = utils.parseQueryString(queryParams);\n\n              angular.extend(qs, hash);\n\n              if (qs.error) {\n                deferred.reject(qs);\n              } else {\n                deferred.resolve(qs);\n              }\n            } else {\n              // Does not contain query/hash parameters, can't do anything at this point.\n              deferred.reject('Redirect has occurred but no query or hash parameters were found. ' + 'They were either not set during the redirect, or were removed before Satellizer ' + 'could read them, e.g. AngularJS routing mechanism.');\n            }\n\n            $interval.cancel(polling);\n            Popup.popupWindow.close();\n          }\n        } catch (error) {\n          // Ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n          // A hack to get around same-origin security policy errors in IE.\n        }\n      }, 20);\n\n      return deferred.promise;\n    };\n\n    Popup.prepareOptions = function (options) {\n      options = options || {};\n      var width = options.width || 500;\n      var height = options.height || 500;\n\n      return angular.extend({\n        width: width,\n        height: height,\n        left: $window.screenX + ($window.outerWidth - width) / 2,\n        top: $window.screenY + ($window.outerHeight - height) / 2.5\n      }, options);\n    };\n\n    Popup.stringifyOptions = function (options) {\n      var parts = [];\n      angular.forEach(options, function (value, key) {\n        parts.push(key + '=' + value);\n      });\n      return parts.join(',');\n    };\n\n    return Popup;\n  }]).service('SatellizerUtils', function () {\n    this.getFullUrlPath = function (location) {\n      var isHttps = location.protocol === 'https:';\n      return location.protocol + '//' + location.hostname + ':' + (location.port || (isHttps ? '443' : '80')) + (/^\\//.test(location.pathname) ? location.pathname : '/' + location.pathname);\n    };\n\n    this.camelCase = function (name) {\n      return name.replace(/([\\:\\-\\_]+(.))/g, function (_, separator, letter, offset) {\n        return offset ? letter.toUpperCase() : letter;\n      });\n    };\n\n    this.parseQueryString = function (keyValue) {\n      var obj = {},\n          key,\n          value;\n      angular.forEach((keyValue || '').split('&'), function (keyValue) {\n        if (keyValue) {\n          value = keyValue.split('=');\n          key = decodeURIComponent(value[0]);\n          obj[key] = angular.isDefined(value[1]) ? decodeURIComponent(value[1]) : true;\n        }\n      });\n      return obj;\n    };\n\n    this.joinUrl = function (baseUrl, url) {\n      if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\n        return url;\n      }\n\n      var joined = [baseUrl, url].join('/');\n\n      var normalize = function normalize(str) {\n        return str.replace(/[\\/]+/g, '/').replace(/\\/\\?/g, '?').replace(/\\/\\#/g, '#').replace(/\\:\\//g, '://');\n      };\n\n      return normalize(joined);\n    };\n\n    this.merge = function (obj1, obj2) {\n      var result = {};\n      for (var i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n          if (i in obj2 && _typeof(obj1[i]) === 'object' && i !== null) {\n            result[i] = this.merge(obj1[i], obj2[i]);\n          } else {\n            result[i] = obj1[i];\n          }\n        }\n      }\n      for (i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n          if (i in result) {\n            continue;\n          }\n          result[i] = obj2[i];\n        }\n      }\n      return result;\n    };\n  }).factory('SatellizerStorage', ['$window', '$log', 'SatellizerConfig', function ($window, $log, config) {\n\n    var store = {};\n\n    // Check if localStorage or sessionStorage is available or enabled\n    var isStorageAvailable = function () {\n      try {\n        var supported = config.storageType in $window && $window[config.storageType] !== null;\n\n        if (supported) {\n          var key = Math.random().toString(36).substring(7);\n          $window[config.storageType].setItem(key, '');\n          $window[config.storageType].removeItem(key);\n        }\n\n        return supported;\n      } catch (e) {\n        return false;\n      }\n    }();\n\n    if (!isStorageAvailable) {\n      $log.warn(config.storageType + ' is not available.');\n    }\n\n    return {\n      get: function get(key) {\n        return isStorageAvailable ? $window[config.storageType].getItem(key) : store[key];\n      },\n      set: function set(key, value) {\n        return isStorageAvailable ? $window[config.storageType].setItem(key, value) : store[key] = value;\n      },\n      remove: function remove(key) {\n        return isStorageAvailable ? $window[config.storageType].removeItem(key) : delete store[key];\n      }\n    };\n  }]).factory('SatellizerInterceptor', ['$q', 'SatellizerConfig', 'SatellizerStorage', 'SatellizerShared', function ($q, config, storage, shared) {\n    return {\n      request: function request(_request) {\n        if (_request.skipAuthorization) {\n          return _request;\n        }\n\n        if (shared.isAuthenticated() && config.httpInterceptor(_request)) {\n          var tokenName = config.tokenPrefix ? config.tokenPrefix + '_' + config.tokenName : config.tokenName;\n          var token = storage.get(tokenName);\n\n          if (config.authHeader && config.authToken) {\n            token = config.authToken + ' ' + token;\n          }\n\n          _request.headers[config.authHeader] = token;\n        }\n\n        return _request;\n      },\n      responseError: function responseError(response) {\n        return $q.reject(response);\n      }\n    };\n  }]).config(['$httpProvider', function ($httpProvider) {\n    $httpProvider.interceptors.push('SatellizerInterceptor');\n  }]);\n})(window, window.angular);\n\n},{}]},{},[1]);\n"],"file":"satellizer.min.js","sourceRoot":"/source/"}