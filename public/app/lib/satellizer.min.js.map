{"version":3,"sources":["satellizer.js"],"names":[],"mappingsfile":"satellizer.min.js","sourcesContent":["/**\r\n * Satellizer 0.14.0\r\n * (c) 2016 Sahat Yalkabov\r\n * License: MIT\r\n */\r\n\r\n// CommonJS package manager support.\r\nif (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {\r\n  module.exports = 'satellizer';\r\n}\r\n\r\n(function(window, angular, undefined) {\r\n  'use strict';\r\n\r\n  if (!window.location.origin) {\r\n    window.location.origin = window.location.protocol + '//' + window.location.hostname + (window.location.port ? (':' + window.location.port) : '');\r\n  }\r\n\r\n  angular.module('satellizer', [])\r\n    .constant('SatellizerConfig', {\r\n      httpInterceptor: function() { return true; },\r\n      withCredentials: false,\r\n      tokenRoot: null,\r\n      baseUrl: '/',\r\n      loginUrl: '/auth/login',\r\n      signupUrl: '/auth/signup',\r\n      unlinkUrl: '/auth/unlink/',\r\n      tokenName: 'token',\r\n      tokenPrefix: 'satellizer',\r\n      authHeader: 'Authorization',\r\n      authToken: 'Bearer',\r\n      storageType: 'localStorage',\r\n      configRol : 'role',\r\n      nameRole : 'roleName',\r\n      configInfo : 'name',\r\n      nameInfo : 'fullName',\r\n      configRoutes : 'routes',\r\n      nameRoutes: 'routesList',\r\n      providers: {\r\n        facebook: {\r\n          name: 'facebook',\r\n          url: '/auth/facebook',\r\n          authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n          redirectUri: window.location.origin + '/',\r\n          requiredUrlParams: ['display', 'scope'],\r\n          scope: ['email'],\r\n          scopeDelimiter: ',',\r\n          display: 'popup',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 580, height: 400 }\r\n        },\r\n        google: {\r\n          name: 'google',\r\n          url: '/auth/google',\r\n          authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n          redirectUri: window.location.origin,\r\n          requiredUrlParams: ['scope'],\r\n          optionalUrlParams: ['display', 'state'],\r\n          scope: ['profile', 'email'],\r\n          scopePrefix: 'openid',\r\n          scopeDelimiter: ' ',\r\n          display: 'popup',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 452, height: 633 },\r\n          state: function() {\r\n            var rand = Math.random().toString(36).substr(2);\r\n            return encodeURIComponent(rand);\r\n          }\r\n        },\r\n        github: {\r\n          name: 'github',\r\n          url: '/auth/github',\r\n          authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n          redirectUri: window.location.origin,\r\n          optionalUrlParams: ['scope'],\r\n          scope: ['user:email'],\r\n          scopeDelimiter: ' ',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 1020, height: 618 }\r\n        },\r\n        instagram: {\r\n          name: 'instagram',\r\n          url: '/auth/instagram',\r\n          authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n          redirectUri: window.location.origin,\r\n          requiredUrlParams: ['scope'],\r\n          scope: ['basic'],\r\n          scopeDelimiter: '+',\r\n          oauthType: '2.0'\r\n        },\r\n        linkedin: {\r\n          name: 'linkedin',\r\n          url: '/auth/linkedin',\r\n          authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n          redirectUri: window.location.origin,\r\n          requiredUrlParams: ['state'],\r\n          scope: ['r_emailaddress'],\r\n          scopeDelimiter: ' ',\r\n          state: 'STATE',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 527, height: 582 }\r\n        },\r\n        twitter: {\r\n          name: 'twitter',\r\n          url: '/auth/twitter',\r\n          authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n          redirectUri: window.location.origin,\r\n          oauthType: '1.0',\r\n          popupOptions: { width: 495, height: 645 }\r\n        },\r\n        twitch: {\r\n          name: 'twitch',\r\n          url: '/auth/twitch',\r\n          authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n          redirectUri: window.location.origin,\r\n          requiredUrlParams: ['scope'],\r\n          scope: ['user_read'],\r\n          scopeDelimiter: ' ',\r\n          display: 'popup',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 500, height: 560 }\r\n        },\r\n        live: {\r\n          name: 'live',\r\n          url: '/auth/live',\r\n          authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n          redirectUri: window.location.origin,\r\n          requiredUrlParams: ['display', 'scope'],\r\n          scope: ['wl.emails'],\r\n          scopeDelimiter: ' ',\r\n          display: 'popup',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 500, height: 560 }\r\n        },\r\n        yahoo: {\r\n          name: 'yahoo',\r\n          url: '/auth/yahoo',\r\n          authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n          redirectUri: window.location.origin,\r\n          scope: [],\r\n          scopeDelimiter: ',',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 559, height: 519 }\r\n        },\r\n        bitbucket: {\r\n          name: 'bitbucket',\r\n          url: '/auth/bitbucket',\r\n          authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n          redirectUri: window.location.origin + '/',\r\n          requiredUrlParams: ['scope'],\r\n          scope: ['email'],\r\n          scopeDelimiter: ' ',\r\n          oauthType: '2.0',\r\n          popupOptions: { width: 1028, height: 529 }\r\n        }\r\n      }\r\n    })\r\n    .provider('$auth', ['SatellizerConfig', function(config) {\r\n      Object.defineProperties(this, {\r\n        httpInterceptor: {\r\n          get: function() { return config.httpInterceptor; },\r\n          set: function(value) {\r\n            if (typeof value === 'function') {\r\n              config.httpInterceptor = value;\r\n            } else {\r\n              config.httpInterceptor = function() {\r\n                return value;\r\n              };\r\n            }\r\n          }\r\n        },\r\n        baseUrl: {\r\n          get: function() { return config.baseUrl; },\r\n          set: function(value) { config.baseUrl = value; }\r\n        },\r\n        loginUrl: {\r\n          get: function() { return config.loginUrl; },\r\n          set: function(value) { config.loginUrl = value; }\r\n        },\r\n        signupUrl: {\r\n          get: function() { return config.signupUrl; },\r\n          set: function(value) { config.signupUrl = value; }\r\n        },\r\n        tokenRoot: {\r\n          get: function() { return config.tokenRoot; },\r\n          set: function(value) { config.tokenRoot = value; }\r\n        },\r\n        tokenName: {\r\n          get: function() { return config.tokenName; },\r\n          set: function(value) { config.tokenName = value; }\r\n        },\r\n        tokenPrefix: {\r\n          get: function() { return config.tokenPrefix; },\r\n          set: function(value) { config.tokenPrefix = value; }\r\n        },\r\n        unlinkUrl: {\r\n          get: function() { return config.unlinkUrl; },\r\n          set: function(value) { config.unlinkUrl = value; }\r\n        },\r\n        authHeader: {\r\n          get: function() { return config.authHeader; },\r\n          set: function(value) { config.authHeader = value; }\r\n        },\r\n        authToken: {\r\n          get: function() { return config.authToken; },\r\n          set: function(value) { config.authToken = value; }\r\n        },\r\n        withCredentials: {\r\n          get: function() { return config.withCredentials; },\r\n          set: function(value) { config.withCredentials = value; }\r\n        },\r\n        storageType: {\r\n          get: function() { return config.storageType; },\r\n          set: function(value) { config.storageType = value; }\r\n        }\r\n      });\r\n\r\n      angular.forEach(Object.keys(config.providers), function(provider) {\r\n        this[provider] = function(params) {\r\n          return angular.extend(config.providers[provider], params);\r\n        };\r\n      }, this);\r\n\r\n      var oauth = function(params) {\r\n        config.providers[params.name] = config.providers[params.name] || {};\r\n        angular.extend(config.providers[params.name], params);\r\n      };\r\n\r\n      this.oauth1 = function(params) {\r\n        oauth(params);\r\n        config.providers[params.name].oauthType = '1.0';\r\n      };\r\n\r\n      this.oauth2 = function(params) {\r\n        oauth(params);\r\n        config.providers[params.name].oauthType = '2.0';\r\n      };\r\n\r\n      this.$get = [\r\n        '$q',\r\n        'SatellizerShared',\r\n        'SatellizerLocal',\r\n        'SatellizerOauth',\r\n        function($q, shared, local, oauth) {\r\n          var $auth = {};\r\n\r\n          $auth.login = function(user, opts) {\r\n            return local.login(user, opts);\r\n          };\r\n\r\n          $auth.signup = function(user, options) {\r\n            return local.signup(user, options);\r\n          };\r\n\r\n          $auth.logout = function() {\r\n            return shared.logout();\r\n          };\r\n\r\n          $auth.authenticate = function(name, userData) {\r\n            return oauth.authenticate(name, userData);\r\n          };\r\n\r\n          $auth.link = function(name, userData) {\r\n            return oauth.authenticate(name, userData);\r\n          };\r\n\r\n          $auth.unlink = function(provider, opts) {\r\n            return oauth.unlink(provider, opts);\r\n          };\r\n\r\n          $auth.isAuthenticated = function() {\r\n            return shared.isAuthenticated();\r\n          };\r\n\r\n          $auth.getToken = function() {\r\n            return shared.getToken();\r\n          };\r\n\r\n          $auth.setToken = function(token) {\r\n            shared.setToken({ access_token: token });\r\n          };\r\n\r\n          $auth.removeToken = function() {\r\n            return shared.removeToken();\r\n          };\r\n\r\n          $auth.getPayload = function() {\r\n            return shared.getPayload();\r\n          };\r\n\r\n          $auth.setStorageType = function(type) {\r\n            return shared.setStorageType(type);\r\n          };\r\n\r\n          return $auth;\r\n        }];\r\n    }])\r\n    .factory('SatellizerShared', [\r\n      '$q',\r\n      '$window',\r\n      '$log',\r\n      'SatellizerConfig',\r\n      'SatellizerStorage',\r\n      function($q, $window, $log, config, storage) {\r\n        var Shared = {};\r\n\r\n        var tokenName = config.tokenPrefix ? [config.tokenPrefix, config.tokenName].join('_') : config.tokenName;\r\n\r\n        Shared.getToken = function() {\r\n          return storage.get(tokenName);\r\n        };\r\n\r\n        Shared.getPayload = function() {\r\n          var token = storage.get(tokenName);\r\n\r\n          if (token && token.split('.').length === 3) {\r\n            try {\r\n              var base64Url = token.split('.')[1];\r\n              var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n              return JSON.parse(decodeURIComponent(escape(window.atob(base64))));\r\n            } catch(e) {\r\n              return undefined;\r\n            }\r\n          }\r\n        };\r\n\r\n        Shared.setToken = function(response) {\r\n          if (!response) {\r\n            return $log.warn('Can\\'t set token without passing a value');\r\n          }\r\n\r\n          var accessToken = response && response.access_token;\r\n          var token,routes,role,name;\r\n          var nameRoutes = config.nameRoutes;\r\n          var nameRole = config.nameRole;\r\n          var nameInfo = config.nameInfo;\r\n\r\n          if (accessToken) {\r\n            if (angular.isObject(accessToken) && angular.isObject(accessToken.data)) {\r\n              response = accessToken;\r\n            } else if (angular.isString(accessToken)) {\r\n              token = accessToken;\r\n            }\r\n          }\r\n\r\n          if (!token && response) {\r\n            var tokenRootData = config.tokenRoot && config.tokenRoot.split('.').reduce(function(o, x) { return o[x]; }, response.data);\r\n            token = tokenRootData ? tokenRootData[config.tokenName] : response.data && response.data[config.tokenName];\r\n            routes = response.data && response.data[config.configRoutes];\r\n            role = response.data && response.data[config.configRol];\r\n            name = response.data && response.data[config.configInfo];\r\n          }\r\n\r\n          if (!token) {\r\n            var tokenPath = config.tokenRoot ? config.tokenRoot + '.' + config.tokenName : config.tokenName;\r\n            return $log.warn('Expecting a token named \"' + tokenPath);\r\n          }\r\n\r\n          storage.set(tokenName, token);\r\n          storage.set(nameRoutes, routes);\r\n          storage.set(nameRole, role);\r\n          storage.set(nameInfo, name);\r\n        };\r\n\r\n        Shared.removeToken = function() {\r\n          storage.remove(tokenName);\r\n        };\r\n\r\n        /**\r\n         * @returns {boolean}\r\n         */\r\n        Shared.isAuthenticated = function() {\r\n          var token = storage.get(tokenName);\r\n          // A token is present\r\n          if (token) {\r\n            // Token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n              // Could be a valid JWT or an access token with the same format\r\n              try {\r\n                var base64Url = token.split('.')[1];\r\n                var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                var exp = JSON.parse($window.atob(base64)).exp;\r\n                // JWT with an optonal expiration claims\r\n                if (exp) {\r\n                  var isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                  if (isExpired) {\r\n                    // FAIL: Expired token\r\n                    return false;\r\n                  } else {\r\n                    // PASS: Non-expired token\r\n                    return true;\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                // PASS: Non-JWT token that looks like JWT\r\n                return true;\r\n              }\r\n            }\r\n            // PASS: All other tokens\r\n            return true;\r\n          }\r\n          // FAIL: No token at all\r\n          return false;\r\n        };\r\n\r\n        Shared.logout = function() {\r\n          storage.remove(tokenName);\r\n          return $q.when();\r\n        };\r\n\r\n        Shared.setStorageType = function(type) {\r\n          config.storageType = type;\r\n        };\r\n\r\n        return Shared;\r\n      }])\r\n    .factory('SatellizerOauth', [\r\n      '$q',\r\n      '$http',\r\n      'SatellizerConfig',\r\n      'SatellizerUtils',\r\n      'SatellizerShared',\r\n      'SatellizerOauth1',\r\n      'SatellizerOauth2',\r\n      function($q, $http, config, utils, shared, Oauth1, Oauth2) {\r\n        var Oauth = {};\r\n\r\n        Oauth.authenticate = function(name, userData) {\r\n          var provider = config.providers[name].oauthType === '1.0' ? new Oauth1() : new Oauth2();\r\n          var deferred = $q.defer();\r\n\r\n          provider.open(config.providers[name], userData || {})\r\n            .then(function(response) {\r\n              // This is for a scenario when someone wishes to opt out from\r\n              // Satellizer's magic by doing authorization code exchange and\r\n              // saving a token manually.\r\n              if (config.providers[name].url) {\r\n                shared.setToken(response, false);\r\n              }\r\n              deferred.resolve(response);\r\n            })\r\n            .catch(function(error) {\r\n              deferred.reject(error);\r\n            });\r\n\r\n          return deferred.promise;\r\n        };\r\n\r\n        Oauth.unlink = function(provider, opts) {\r\n          opts = opts || {};\r\n          opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.unlinkUrl);\r\n          opts.data = { provider: provider } || opts.data;\r\n          opts.method = opts.method || 'POST';\r\n          opts.withCredentials = opts.withCredentials || config.withCredentials;\r\n\r\n          return $http(opts);\r\n        };\r\n\r\n        return Oauth;\r\n      }])\r\n    .factory('SatellizerLocal', [\r\n      '$http',\r\n      'SatellizerUtils',\r\n      'SatellizerShared',\r\n      'SatellizerConfig',\r\n      function($http, utils, shared, config) {\r\n        var Local = {};\r\n\r\n        Local.login = function(user, opts) {\r\n          opts = opts || {};\r\n          opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.loginUrl);\r\n          opts.data = user || opts.data;\r\n          opts.method = opts.method || 'POST';\r\n          opts.withCredentials = opts.withCredentials || config.withCredentials;\r\n\r\n          return $http(opts).then(function(response) {\r\n            shared.setToken(response);\r\n            return response;\r\n          });\r\n        };\r\n\r\n        Local.signup = function(user, opts) {\r\n          opts = opts || {};\r\n          opts.url = opts.url ? opts.url : utils.joinUrl(config.baseUrl, config.signupUrl);\r\n          opts.data = user || opts.data;\r\n          opts.method = opts.method || 'POST';\r\n          opts.withCredentials = opts.withCredentials || config.withCredentials;\r\n\r\n          return $http(opts);\r\n        };\r\n\r\n        return Local;\r\n      }])\r\n    .factory('SatellizerOauth2', [\r\n      '$q',\r\n      '$http',\r\n      '$window',\r\n      '$timeout',\r\n      'SatellizerPopup',\r\n      'SatellizerUtils',\r\n      'SatellizerConfig',\r\n      'SatellizerStorage',\r\n      function($q, $http, $window, $timeout, popup, utils, config, storage) {\r\n        return function() {\r\n          var Oauth2 = {};\r\n\r\n          var defaults = {\r\n            defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\r\n            responseType: 'code',\r\n            responseParams: {\r\n              code: 'code',\r\n              clientId: 'clientId',\r\n              redirectUri: 'redirectUri'\r\n            }\r\n          };\r\n\r\n          Oauth2.open = function(options, userData) {\r\n            defaults = utils.merge(options, defaults);\r\n            var defer = $q.defer();\r\n\r\n            $timeout(function () {\r\n              var url;\r\n              var openPopup;\r\n              var stateName = defaults.name + '_state';\r\n\r\n              if (angular.isFunction(defaults.state)) {\r\n                storage.set(stateName, defaults.state());\r\n              } else if (angular.isString(defaults.state)) {\r\n                storage.set(stateName, defaults.state);\r\n              }\r\n\r\n              url = [defaults.authorizationEndpoint, Oauth2.buildQueryString()].join('?');\r\n\r\n              if (window.cordova) {\r\n                openPopup = popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri).eventListener(defaults.redirectUri);\r\n              } else {\r\n                openPopup = popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri).pollPopup(defaults.redirectUri);\r\n              }\r\n\r\n              return openPopup\r\n                .then(function(oauthData) {\r\n                  // When no server URL provided, return popup params as-is.\r\n                  // This is for a scenario when someone wishes to opt out from\r\n                  // Satellizer's magic by doing authorization code exchange and\r\n                  // saving a token manually.\r\n                  if (defaults.responseType === 'token' || !defaults.url) {\r\n                    return defer.resolve(oauthData);\r\n                  }\r\n\r\n                  if (oauthData.state && oauthData.state !== storage.get(stateName)) {\r\n                    return defer.reject(\r\n                      'The value returned in the state parameter does not match the state value from your original ' +\r\n                      'authorization code request.'\r\n                    );\r\n                  }\r\n\r\n                  defer.resolve(Oauth2.exchangeForToken(oauthData, userData));\r\n                });\r\n            });\r\n\r\n            return defer.promise;\r\n          };\r\n\r\n          Oauth2.exchangeForToken = function(oauthData, userData) {\r\n            var data = angular.extend({}, userData);\r\n\r\n            angular.forEach(defaults.responseParams, function(value, key) {\r\n              switch (key) {\r\n                case 'code':\r\n                  data[value] = oauthData.code;\r\n                  break;\r\n                case 'clientId':\r\n                  data[value] = defaults.clientId;\r\n                  break;\r\n                case 'redirectUri':\r\n                  data[value] = defaults.redirectUri;\r\n                  break;\r\n                default:\r\n                  data[value] = oauthData[key];\r\n              }\r\n            });\r\n\r\n            if (oauthData.state) {\r\n              data.state = oauthData.state;\r\n            }\r\n\r\n            var exchangeForTokenUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;\r\n\r\n            return $http.post(exchangeForTokenUrl, data, { withCredentials: config.withCredentials });\r\n          };\r\n\r\n          Oauth2.buildQueryString = function() {\r\n            var keyValuePairs = [];\r\n            var urlParamsCategories = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\r\n\r\n            angular.forEach(urlParamsCategories, function(paramsCategory) {\r\n              angular.forEach(defaults[paramsCategory], function(paramName) {\r\n                var camelizedName = utils.camelCase(paramName);\r\n                var paramValue = angular.isFunction(defaults[paramName]) ? defaults[paramName]() : defaults[camelizedName];\r\n\r\n                if (paramName === 'redirect_uri' && !paramValue) {\r\n                    return;\r\n                }\r\n\r\n                if (paramName === 'state') {\r\n                  var stateName = defaults.name + '_state';\r\n                  paramValue = encodeURIComponent(storage.get(stateName));\r\n                }\r\n\r\n                if (paramName === 'scope' && Array.isArray(paramValue)) {\r\n                  paramValue = paramValue.join(defaults.scopeDelimiter);\r\n\r\n                  if (defaults.scopePrefix) {\r\n                    paramValue = [defaults.scopePrefix, paramValue].join(defaults.scopeDelimiter);\r\n                  }\r\n                }\r\n\r\n                keyValuePairs.push([paramName, paramValue]);\r\n              });\r\n            });\r\n\r\n            return keyValuePairs.map(function(pair) {\r\n              return pair.join('=');\r\n            }).join('&');\r\n          };\r\n\r\n          return Oauth2;\r\n        };\r\n      }])\r\n    .factory('SatellizerOauth1', [\r\n      '$q',\r\n      '$http',\r\n      'SatellizerPopup',\r\n      'SatellizerConfig',\r\n      'SatellizerUtils',\r\n      function($q, $http, popup, config, utils) {\r\n        return function() {\r\n          var Oauth1 = {};\r\n\r\n          var defaults = {\r\n            url: null,\r\n            name: null,\r\n            popupOptions: null,\r\n            redirectUri: null,\r\n            authorizationEndpoint: null\r\n          };\r\n\r\n          Oauth1.open = function(options, userData) {\r\n            angular.extend(defaults, options);\r\n            var popupWindow;\r\n            var serverUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;\r\n\r\n            if (!window.cordova) {\r\n                popupWindow = popup.open('', defaults.name, defaults.popupOptions, defaults.redirectUri);\r\n            }\r\n\r\n            return $http.post(serverUrl, defaults)\r\n              .then(function(response) {\r\n                var url = [defaults.authorizationEndpoint, Oauth1.buildQueryString(response.data)].join('?');\r\n\r\n                if (window.cordova) {\r\n                  popupWindow = popup.open(url, defaults.name, defaults.popupOptions, defaults.redirectUri);\r\n                } else {\r\n                  popupWindow.popupWindow.location = url;\r\n                }\r\n\r\n                var popupListener;\r\n\r\n                if (window.cordova) {\r\n                  popupListener = popupWindow.eventListener(defaults.redirectUri);\r\n                } else {\r\n                  popupListener = popupWindow.pollPopup(defaults.redirectUri);\r\n                }\r\n\r\n                return popupListener\r\n                  .then(function(response) {\r\n                    return Oauth1.exchangeForToken(response, userData);\r\n                  });\r\n              });\r\n\r\n          };\r\n\r\n          Oauth1.exchangeForToken = function(oauthData, userData) {\r\n            var data = angular.extend({}, userData, oauthData);\r\n            var exchangeForTokenUrl = config.baseUrl ? utils.joinUrl(config.baseUrl, defaults.url) : defaults.url;\r\n            return $http.post(exchangeForTokenUrl, data, { withCredentials: config.withCredentials });\r\n          };\r\n\r\n          Oauth1.buildQueryString = function(obj) {\r\n            var str = [];\r\n\r\n            angular.forEach(obj, function(value, key) {\r\n              str.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n            });\r\n\r\n            return str.join('&');\r\n          };\r\n\r\n          return Oauth1;\r\n        };\r\n      }])\r\n    .factory('SatellizerPopup', [\r\n      '$q',\r\n      '$interval',\r\n      '$window',\r\n      'SatellizerConfig',\r\n      'SatellizerUtils',\r\n      function($q, $interval, $window, config, utils) {\r\n        var Popup = {};\r\n\r\n        Popup.url = '';\r\n        Popup.popupWindow = null;\r\n\r\n        Popup.open = function(url, name, options) {\r\n          Popup.url = url;\r\n\r\n          var stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\r\n          var UA = $window.navigator.userAgent;\r\n          var windowName = (window.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\r\n\r\n          Popup.popupWindow = $window.open(url, windowName, stringifiedOptions);\r\n\r\n          $window.popup = Popup.popupWindow;\r\n\r\n          if (Popup.popupWindow && Popup.popupWindow.focus) {\r\n            Popup.popupWindow.focus();\r\n          }\r\n\r\n          return Popup;\r\n        };\r\n\r\n        Popup.eventListener = function(redirectUri) {\r\n          var deferred = $q.defer();\r\n\r\n          Popup.popupWindow.addEventListener('loadstart', function(event) {\r\n            if (event.url.indexOf(redirectUri) !== 0) {\r\n              return;\r\n            }\r\n\r\n            var parser = document.createElement('a');\r\n            parser.href = event.url;\r\n\r\n            if (parser.search || parser.hash) {\r\n              var queryParams = parser.search.substring(1).replace(/\\/$/, '');\r\n              var hashParams = parser.hash.substring(1).replace(/\\/$/, '');\r\n              var hash = utils.parseQueryString(hashParams);\r\n              var qs = utils.parseQueryString(queryParams);\r\n\r\n              angular.extend(qs, hash);\r\n\r\n              if (!qs.error) {\r\n                deferred.resolve(qs);\r\n              }\r\n\r\n              Popup.popupWindow.close();\r\n            }\r\n          });\r\n\r\n          Popup.popupWindow.addEventListener('loaderror', function() {\r\n            deferred.reject('Authorization Failed');\r\n          });\r\n\r\n          return deferred.promise;\r\n        };\r\n\r\n        Popup.pollPopup = function(redirectUri) {\r\n          var deferred = $q.defer();\r\n\r\n          var redirectUriParser = document.createElement('a');\r\n          redirectUriParser.href = redirectUri;\r\n\r\n          var redirectUriPath = utils.getFullUrlPath(redirectUriParser);\r\n\r\n          var polling = $interval(function() {\r\n            if (!Popup.popupWindow || Popup.popupWindow.closed || Popup.popupWindow.closed === undefined) {\r\n              deferred.reject('The popup window was closed.');\r\n              $interval.cancel(polling);\r\n            }\r\n\r\n            try {\r\n              var popupWindowPath = utils.getFullUrlPath(Popup.popupWindow.location);\r\n\r\n              // Redirect has occurred.\r\n              if (popupWindowPath === redirectUriPath) {\r\n                // Contains query/hash parameters as expected.\r\n                if (Popup.popupWindow.location.search || Popup.popupWindow.location.hash) {\r\n                  var queryParams = Popup.popupWindow.location.search.substring(1).replace(/\\/$/, '');\r\n                  var hashParams = Popup.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\r\n                  var hash = utils.parseQueryString(hashParams);\r\n                  var qs = utils.parseQueryString(queryParams);\r\n\r\n                  angular.extend(qs, hash);\r\n\r\n                  if (qs.error) {\r\n                    deferred.reject(qs);\r\n                  } else {\r\n                    deferred.resolve(qs);\r\n                  }\r\n                } else {\r\n                  // Does not contain query/hash parameters, can't do anything at this point.\r\n                  deferred.reject(\r\n                    'Redirect has occurred but no query or hash parameters were found. ' +\r\n                    'They were either not set during the redirect, or were removed before Satellizer ' +\r\n                    'could read them, e.g. AngularJS routing mechanism.'\r\n                  );\r\n                }\r\n\r\n                $interval.cancel(polling);\r\n                Popup.popupWindow.close();\r\n              }\r\n            } catch (error) {\r\n              // Ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\r\n              // A hack to get around same-origin security policy errors in IE.\r\n            }\r\n          }, 20);\r\n\r\n          return deferred.promise;\r\n        };\r\n\r\n        Popup.prepareOptions = function(options) {\r\n          options = options || {};\r\n          var width = options.width || 500;\r\n          var height = options.height || 500;\r\n\r\n          return angular.extend({\r\n            width: width,\r\n            height: height,\r\n            left: $window.screenX + (($window.outerWidth - width) / 2),\r\n            top: $window.screenY + (($window.outerHeight - height) / 2.5)\r\n          }, options);\r\n        };\r\n\r\n        Popup.stringifyOptions = function(options) {\r\n          var parts = [];\r\n          angular.forEach(options, function(value, key) {\r\n            parts.push(key + '=' + value);\r\n          });\r\n          return parts.join(',');\r\n        };\r\n\r\n        return Popup;\r\n      }])\r\n    .service('SatellizerUtils', function() {\r\n      this.getFullUrlPath = function(location) {\r\n        var isHttps = location.protocol === 'https:';\r\n        return location.protocol + '//' + location.hostname +\r\n          ':' + (location.port || (isHttps ? '443' : '80')) +\r\n          (/^\\//.test(location.pathname) ? location.pathname : '/' + location.pathname);\r\n      };\r\n\r\n      this.camelCase = function(name) {\r\n        return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n          return offset ? letter.toUpperCase() : letter;\r\n        });\r\n      };\r\n\r\n      this.parseQueryString = function(keyValue) {\r\n        var obj = {}, key, value;\r\n        angular.forEach((keyValue || '').split('&'), function(keyValue) {\r\n          if (keyValue) {\r\n            value = keyValue.split('=');\r\n            key = decodeURIComponent(value[0]);\r\n            obj[key] = angular.isDefined(value[1]) ? decodeURIComponent(value[1]) : true;\r\n          }\r\n        });\r\n        return obj;\r\n      };\r\n\r\n      this.joinUrl = function(baseUrl, url) {\r\n        if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\r\n          return url;\r\n        }\r\n\r\n        var joined = [baseUrl, url].join('/');\r\n\r\n        var normalize = function(str) {\r\n          return str\r\n            .replace(/[\\/]+/g, '/')\r\n            .replace(/\\/\\?/g, '?')\r\n            .replace(/\\/\\#/g, '#')\r\n            .replace(/\\:\\//g, '://');\r\n        };\r\n\r\n        return normalize(joined);\r\n      };\r\n\r\n      this.merge = function(obj1, obj2) {\r\n        var result = {};\r\n        for (var i in obj1) {\r\n          if (obj1.hasOwnProperty(i)) {\r\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\r\n              result[i] = this.merge(obj1[i], obj2[i]);\r\n            } else {\r\n              result[i] = obj1[i];\r\n            }\r\n          }\r\n        }\r\n        for (i in obj2) {\r\n          if (obj2.hasOwnProperty(i)) {\r\n            if (i in result) {\r\n              continue;\r\n            }\r\n            result[i] = obj2[i];\r\n          }\r\n\r\n        }\r\n        return result;\r\n      };\r\n    })\r\n    .factory('SatellizerStorage', ['$window', '$log', 'SatellizerConfig', function($window, $log, config) {\r\n\r\n      var store = {};\r\n\r\n      // Check if localStorage or sessionStorage is available or enabled\r\n      var isStorageAvailable = (function() {\r\n        try {\r\n          var supported = config.storageType in $window && $window[config.storageType] !== null;\r\n\r\n          if (supported) {\r\n            var key = Math.random().toString(36).substring(7);\r\n            $window[config.storageType].setItem(key, '');\r\n            $window[config.storageType].removeItem(key);\r\n          }\r\n\r\n          return supported;\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      })();\r\n\r\n      if (!isStorageAvailable) {\r\n        $log.warn(config.storageType + ' is not available.');\r\n      }\r\n\r\n      return {\r\n        get: function(key) {\r\n          return isStorageAvailable ? $window[config.storageType].getItem(key) : store[key];\r\n        },\r\n        set: function(key, value) {\r\n          return isStorageAvailable ? $window[config.storageType].setItem(key, value) : store[key] = value;\r\n        },\r\n        remove: function(key) {\r\n          return isStorageAvailable ? $window[config.storageType].removeItem(key): delete store[key];\r\n        }\r\n      };\r\n\r\n    }])\r\n    .factory('SatellizerInterceptor', [\r\n      '$q',\r\n      'SatellizerConfig',\r\n      'SatellizerStorage',\r\n      'SatellizerShared',\r\n      function($q, config, storage, shared) {\r\n        return {\r\n          request: function(request) {\r\n            if (request.skipAuthorization) {\r\n              return request;\r\n            }\r\n\r\n            if (shared.isAuthenticated() && config.httpInterceptor(request)) {\r\n              var tokenName = config.tokenPrefix ? config.tokenPrefix + '_' + config.tokenName : config.tokenName;\r\n              var token = storage.get(tokenName);\r\n\r\n              if (config.authHeader && config.authToken) {\r\n                token = config.authToken + ' ' + token;\r\n              }\r\n\r\n              request.headers[config.authHeader] = token;\r\n            }\r\n\r\n            return request;\r\n          },\r\n          responseError: function(response) {\r\n            return $q.reject(response);\r\n          }\r\n        };\r\n      }])\r\n    .config(['$httpProvider', function($httpProvider) {\r\n      $httpProvider.interceptors.push('SatellizerInterceptor');\r\n    }]);\r\n\r\n})(window, window.angular);"],"sourceRoot":"/source/"}